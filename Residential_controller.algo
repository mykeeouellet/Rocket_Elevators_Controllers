// This program controls residential elevators

INIT elevatorsList as [elevator1, elevator2]

FOR EACH elevator in elevatorsList 

    INIT value
    INIT status
    INIT currentfloor
    INIT door
    INIT weightLimit
    INIT currentWeight
    INIT origin

END FOR


//This is the sequence that sets origin parameters to the elevators

SEQUENCE origin USING selectedElevator
    
    SET elevator.origin to elevator.currentFloor
    SET elevator.status to idle

END SEQUENCE


//This is the sequence that determines if the currentWeight of the elevator is greater than its weightLimit

SEQUENCE weightCheck USING elevator.currentWeight

    OBTAIN weightLimit

        IF elevator.currentWeight is greater or equal to elevator.weightLimit
            RETURN FALSE
        ELSE 
            RETURN TRUE

        END IF 

END SEQUENCE


//This is the sequence that determine the user position and direction based on the input he gives to the column controller

SEQUENCE elevatorRequest
    

    IF btnUp is pressed 
        THEN SET userDirection to UP
        RETURN userFloor & userDirection

    ELSE 
        THEN SET userdirection to DOWN
        RETURN userFloor & userDirection
        
    END IF

END SEQUENCE


//This is the sequence that controls the opening of the elevator doors//

SEQUENCE operateDoors USING selectedElevator 

    OBTAIN elevator.status

    WHILE elevator.status is UP or DOWN 
        DO close doors 
        SET elevator.door to close

            IF elevator.status is IDLE 
                WAIT
                THEN DO open doors
                SET elevator.door to open
                WAIT
                THEN DO close doors
                SET elevator.door to close

                    IF btnOpen is pressed 
                        THEN DO open doors
                        SET elevator.door to open 
                        WAIT
                        THEN DO close doors
                        SET elevator.door to close
                    END IF

                    IF btnClose is pressed
                        THEN DO close doors
                        SET elevator.door to close
                    END IF
            END IF

    END WHILE

END SEQUENCE


//This is the sequence that finds the correct elevator to send to the user after he has called the elevator//

SEQUENCE findElevator USING userfloor & userDirection

    FOR EACH elevator in elevatorsList

        OBTAIN elevator.status
        OBTAIN elevator.currentFloor 
        COMPUTE diffElev as userFloor minus elevator.currentFloor

            IF diffElev equals zero AND elevator.status is IDLE and userDirection is UP
                THEN SET elevator.value to 1

            ELSE IF diffElev equals zero AND elevator.status is IDLE and userDirection is DOWN
                THEN SET elevator.value to 2

            ELSE IF diffElev is greater than zero AND elevator.status is IDLE and userDirection is DOWN
                THEN SET elevator.value to 3

            ELSE IF diffElev is greater than zero AND elevator.status is IDLE and userDirection is UP
                THEN SET elevator.value to 4

            ELSE IF diffElev is greater than zero AND elevator.status is DOWN and userDirection is DOWN
                THEN SET elevator.value to 5

            ELSE IF diffElev is greater than zero AND elevator.status is UP and userDirection is UP 
                THEN SET elevator.value to 6
            
            ELSE IF diffElev equals zero AND elevator.status is UP and userDirection is UP 
                THEN SET elevator.value to 7
            
            ELSE IF diffElev equals zero AND elevator.status is DOWN and userDirection is DOWN 
                THEN SET elevator.value to 8
            
            ELSE IF diffElev is greater than zero AND elevator.status is UP and userDirection is DOWN 
                THEN SET elevator.value to 9
            
            ELSE IF diffElev is greater than zero AND elevator.status is DOWN and userDirection is UP
                THEN SET elevator.value to 10

            ELSE IF diffElev is equals zero AND elevator.status is UP and userDirection is DOWN 
                THEN SET elevator.value to 11
            
            ELSE IF diffElev equals zero AND elevator.status is DOWN and userDirection is UP
                THEN SET elevator.value to 12
            END IF

    END FOR 

    DETERMINE elevator with lowest elevator.value and lowest diffElev as selectedElevator

    RETURN selectedElevator

END SEQUENCE


//This is the sequence that controls the movement of the elevator//

SEQUENCE moveElevator USING userFloor and selectedElevator

    OBTAIN elevator.currentFloor of selectedElevator

     DO selfCheck 
    
        IF selfcheck is false 
            THEN DISPLAY "Elevator out of service."
            BREAK 
        ELSE 
            CONTINUE

        END IF

    DO weightCheck

        IF weightCheck is false
            THEN DISPLAY "Warning! Reduce weight."
            BREAK
        ELSE 
            CONTINUE

        END IF

    WHILE elevator.currentFloor is not equal to userFloor 

        IF elevator.currentFloor is greater than userFloor 
            THEN SET elevator.status to DOWN 
            DISPLAY arrow pointing DOWN 
            RETURN elevator.status

        ELSE IF elevator.currentFloor is smaller than userFloor
            THEN SET elevator.status to UP
            DISPLAY arrow pointing UP
            RETURN elevator.status

        ELSE IF elevator.currentFloor equals userFloor
            THEN SET elevator.status to IDLE   
            RETURN elevator.status  

            CALL operateDoors WITH selectedElevator

        END IF

    END WHILE

    IF elevator.status is IDLE for more than 1 minute 
        THEN CALL origin WITH selectedElevator

    END IF

END SEQUENCE



//This is the sequence that controls the whole user interaction OUTSIDE of the elevator

SEQUENCE callElevator

        CALL elevatorRequest RETURNING userFloor and userDirection 

            CALL findElevator WITH userFloor and userDirection RETURNING selectedElevator

                CALL moveElevator WITH userFloor and selectedElevator RETURNING elevator.status

END SEQUENCE



//This is the sequence that controls the whole user interaction INSIDE of the elevator

SEQUENCE requestFloor USING userFloor  
    
    CALL moveElevator WITH userFloor and selectedElevator RETURNING elevator.status
    
END SEQUENCE








