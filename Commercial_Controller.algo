//This program controls commercial elevators

INIT columnList as [columnA, columnB, columnC, columnD]

FOR EACH column in columnList

    INIT numberOfFloorPerColumn as (totalFloors minus totalBasements) divided by (totalColumn minus one)
    INIT floorMax as ((totalColumn minus one) times numberOfFloorPerColumn)
    INIT floorMin as ((totalColumn minus one) times numberOfFloorPerColumn) minus (numberOfFloorPerColummn minus one)
    INIT floorsList as [floorMin, floorMax]
    INIT elevatorsList as [elevator1, elevator2, elevator3]

        FOR EACH elevator in elevatorsList

            INIT value 
            INIT status
            INIT currentFloor
            INIT weightLimit
            INIT currentWeight
            INIT origin
            INIT door

        END FOR

END FOR


//This is the sequence that determines if the currentWeight of the elevator is greater than its weightLimit

SEQUENCE weightCheck USING elevator.currentWeight

    OBTAIN elevator.weightLimit

        IF elevator.currentWeight is greater or equal to elevator.weightLimit
            RETURN FALSE
        ELSE 
            RETURN TRUE

        END IF 

END SEQUENCE


//This is the sequence that sets origin parameters to the elevators

SEQUENCE origin USING selectedElevator
    
    OBTAIN elevator.origin 
    
    IF elevator.currentFloor is greater than elevator.origin 
        DO moveDown 
        THEN SET elevator.status to down

    IF elevator.currentFloor is less than elevator.origin 
        DO moveUp 
        THEN SET elevator.status to up

    ELSE 
        DO idle
        THEN SET elevator.status to idle
    
    END IF

END SEQUENCE


//This is the sequence that controls the input of the user

SEQUENCE floorRequest USING requestedFloor and userFloor

        IF userfloor is less than requestedFloor 
            THEN SET userDirection to UP

        ELSE IF userfloor is greater than requestedFloor
            THEN SET userDirection to DOWN 

        END IF 

    RETURN userDirection

END SEQUENCE


//This is the sequence that determines wich column to use

SEQUENCE findColumn USING requestedFloor 

    FOR EACH column in columnList

        IF column.floorsList contains requestedFloor 

            RETURN column as selectedColumn

        END IF

    END FOR

END SEQUENCE


//This is the sequence that determines wich elevator to use 

SEQUENCE findElevator USING selectedColumn, userFloor and userDirection

    IF selectedColumn is columnA 

        FOR EACH elevator in selectedColumn elevatorsList 

            OBTAIN elevator.currentFloor
            OBTAIN elevator.status
            COMPUTE diffElev as userFloor minus elevator.currentFloor

            IF elevator.currentFloor is equal to userFloor AND elevator.status is IDLE and userDirection is DOWN 
            THEN SET elevator.value to 1
            IF elevator.currentFloor is equal to userFloor AND elevator.status is IDLE and userDirection is UP 
            THEN SET elevator.value to 2
            IF elevator.currentFloor is less than userFloor AND elevator.status is IDLE and userDirection is DOWN 
            THEN SET elevator.value to 3
            IF elevator.currentFloor is less than userFloor AND elevator.status is UP and userDirection is DOWN
            THEN SET elevator.value to 4 
            IF elevator.currentFloor is greater than userFloor AND elevator.status is IDLE and userDirection is UP
            THEN SET elevator.value to 5
            IF elevator.currentFloor is less than userFloor AND elevator.status is UP and userDirection is UP
            THEN SET elevator.value to 6
            IF elevator.currentFloor is less than userFloor AND elevator.status is DOWN and userDirection is DOWN 
            THEN SET elevator.value to 7
            ELSE 
            SET elevator.value to 10

            END IF 

            DETERMINE elevator with lowest elevator.value and lowest diffElev as selectedElevator 
            RETURN selectedElevator

        END FOR
 
    ELSE 
        FOR EACH elevator in selectedColumn elevatorsList

            OBTAIN elevator.currentFloor
            OBTAIN elevator.status
            COMPUTE diffElev as userFloor minus currentFloor of elevator

            IF elevator.currentFloor is equal to userFloor AND elevator.status is IDLE and userDirection is UP 
            THEN SET elevator.value to 1
            IF elevator.currentFloor is equal to userFloor AND elevator.status is IDLE and userDirection is DOWN 
            THEN SET elevator.value to 2
            IF elevator.currentFloor is greater than userFloor AND elevator.status is IDLE and userDirection is DOWN 
            THEN SET elevator.value to 3
            IF elevator.currentFloor is less than userFloor AND elevator.status is IDLE and userDirection is DOWN
            THEN SET elevator.value to 4 
            IF elevator.currentFloor is greater than userFloor AND elevator.status is DOWN and userDirection is DOWN
            THEN SET elevator.value to 5
            IF elevator.currentFloor is less than userFloor AND elevator.status is UP and userDirection is DOWN
            THEN SET elevator.value to 6
            IF elevator.currentFloor is less than userFloor AND elevator.status is DOWN and userDirection is DOWN 
            THEN SET elevator.value to 7
            ELSE 
            SET elevator.value to 10

            END IF 

            DETERMINE elevator with lowest elevator.value and lowest diffElev as selectedElevator  
            RETURN selectedElevator

        END FOR 

   
    END IF 
 
END SEQUENCE


//This is the sequence that controls the movement of the elevator

SEQUENCE moveElevator USING selectedColumn, selectedElevator, requestedFloor and userFloor

    OBTAIN elevator.currentFloor of selectedElevator
    
    DO selfCheck 

        IF selfcheck is false 
            THEN DISPLAY "Elevator out of service"
            BREAK 
        ELSE 
            CONTINUE

        END IF

    CALL weightCheck WITH elevator.currentWeight RETURNING TRUE or FALSE

        IF weightCheck is false
            THEN DISPLAY "Warning! Reduce weight"
            BREAK
        ELSE 
            CONTINUE

        END IF

    WHILE elevator.currentFloor is not equal to userFloor OR requestedFloor

        IF elevator.currentFloor is greater than userFloor OR requestedFloor
            DO moveDown
            THEN SET elevator.status to down 

        ELSE IF elevator.currentFloor is less than userFloor OR requestedFloor
            DO moveUp
            THEN SET elevator.status to up

        ELSE 
            DO idle
            THEN SET elevator.status to idle 
             CALL operateDoors WITH selectedColumn and selectedElevator

        END IF

    END WHILE

    IF elevator.status is idle for more than 1 minute 
        THEN CALL origin WITH selectedColumn and selectedElevator

    END IF 

    RETURN elevator.status

END SEQUENCE


//This is the sequence that operate the elevator doors

SEQUENCE operateDoors USING selectedColumn and selectedElevator

    OBTAIN elevator.status

    WHILE elevator.status is UP or DOWN 
        DO close doors 
        SET elevator.door to close

            IF elevator.status is IDLE 
                WAIT
                THEN DO open doors
                SET elevator.door to open
                WAIT
                THEN DO close doors
                SET elevator.door to close

                    IF btnOpen is pressed 
                        THEN DO open doors
                        SET elevator.door to open 
                        WAIT
                        THEN DO close doors
                        SET elevator.door to close
                    END IF

                    IF btnClose is pressed
                        THEN DO close doors
                        SET elevator.door to close
                    END IF

            END IF

    END WHILE

END SEQUENCE


//This is the sequence that controls the whole user interaction with the elevator, including the other sequences

SEQUENCE requestElevator 

    CALL floorRequest WITH requestedFloor and userFloor RETURNING userDirection

        CALL findColumn WITH requestedFloor and userFloor RETURNING selectedColumn

            CALL findElevator WITH selectedColumn, userFloor and userDirection RETURNING selectedElevator
 
    CALL moveElevator WITH selectedColumn, selectedElevator, requestedFloor and userFloor RETURNING elevator.status
    

END SEQUENCE 
